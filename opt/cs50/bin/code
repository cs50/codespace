#!/bin/bash

# Formatting
bold=$(tput bold)
normal=$(tput sgr0)

# Check whether run with any options
options=false
for arg in "$@"; do
    if [[ "$arg" =~ ^- ]]; then
        options=true
        break
    fi
done

# If not, assume less comfortable
if [ "$options" = false ]; then

    # If no arguments
    if [ $# -eq 0 ]; then
        read -p "Are you sure you want to run ${bold}code${normal} without a filename? It would open a new tab. [y/N] " -r
        if [[ ! "${REPLY,,}" =~ ^y|yes$ ]]; then
            exit 1
        fi

        # Open same workspace in new tab, to avoid ?ew=true
        set -- "$CODESPACE_VSCODE_FOLDER"
    fi

    # For each file
    for arg in "$@"; do

        # If a directory
        if [ -d "$arg" ]; then
            read -p "Are you sure you want to open ${bold}${arg}${normal}? It's a folder, not a file, so it would open in a new tab. [y/N] " -r
            if [[ ! "${REPLY,,}" =~ ^y|yes$ ]]; then
                exit 1
            fi
            continue
        fi

        # If file doesn't exist
        if [ ! -f "$arg" ]; then

            # If first letter is capitalized but one of these languages
            if [[ "$arg" =~ ^[A-Z].*\.(c|css|html|js|py)$ ]]; then
                read -p "Are you sure you want to create ${bold}${arg}${normal}? Filenames aren't usually capitalized. [y/N] " -r
                if [[ ! "${REPLY,,}" =~ ^y|yes$ ]]; then
                    exit 1
                fi
            fi

            # If first letter is lowercase but Java
            if [[ "$arg" =~ ^[a-z].*\.java$ ]]; then
                read -p "Are you sure you want to create ${bold}${arg}${normal}? Filenames are usually capitalized. [y/N] " -r
                if [[ ! "${REPLY,,}" =~ ^y|yes$ ]]; then
                    exit 1
                fi
            fi

            # If file doesn't have an extension
            if [[ ! "$arg" =~ \.[^.]+$ ]]; then
                read -p "Are you sure you want to create ${bold}${arg}${normal}? Filenames usually have extensions. [y/N] " -r
                if [[ ! "${REPLY,,}" =~ ^y|yes$ ]]; then
                    exit 1
                fi
            fi

            # If file extension is capitalized
            if [[ "$arg" =~ \.[A-Z]+$ ]]; then
                read -p "Are you sure you want to create ${bold}${arg}${normal}? File extensions aren't usually capitalized. [y/N] " -r
                if [[ ! "${REPLY,,}" =~ ^y|yes$ ]]; then
                    exit 1
                fi
            fi

            # Ensure files created with `code` are autosaved too,
            # touching access time instead of modification time, so that `make` doesn't think file has changed
            touch -a "$arg" 2> /dev/null
        fi
    done
fi

# since /opt/cs50/bin already have higher precedence in PATH
remote_code=$(which -a code | grep remote-cli)
remote_insiders=$(which -a code-insiders | grep remote-cli)

if [ -n "$remote_code" ]; then
    exec "$remote_code" "$@"
elif [ -n "$remote_insiders" ]; then
    exec "$remote_insiders" "$@"
else
    echo "Error: Could not find VS Code remote CLI" >&2
    exit 1
fi
